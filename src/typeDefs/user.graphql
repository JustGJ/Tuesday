type Query {
  allUsers: [User!]!
  getSingleUser(email: String!): User
  allBusinessHasUsers: [Business_has_users!]!
  getUserBusinesses(userId: Int!): [Business_has_users!]!
  authentificate(email: String!, password: String!): authentificateSuccess
}
type Mutation {
  createUser(
    name: String!
    lastname: String!
    email: String!
    password: String!
  ): successRegisteredUser!

  createBusinessHasUsers(
    userId: Int!
    businessId: Int!
    isAdmin: Boolean!
  ): Business_has_users!
  changePassword(
    email: String!
    password: String!
    newPassword: String!
  ): String!
  deleteUser(email: String!): User
  updateUserName(name: String, lastname: String): User
  updateUserMail(password: String, email: String): authentificateSuccess
}
type User {
  name: String
  lastname: String
  email: String
  password: String
  id: Int
  businesses: [Business_has_users]
  projects: [Project_has_users]
  tasks: [User_has_tasks]
  comments: [Comment]
}
type User_has_tasks {
  userId: Int
  taskId: Int
  user: User
  task: Task
  percentageDone: Int
  workedTime: Int
}

type authentificateSuccess {
  email: String!
  success: Boolean!
  token: String
}

type successRegisteredUser {
  name: String!
  lastname: String!
  email: String!
  success: Boolean!
}
